package itsurena.ir.demo2.xmlClass.dto;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public enum SimaOperationType implements CommonEnumInterface {
    IS_PARTY_BLOCKED("SIMA_OPERATION_TYPE.IS_PARTY_BLOCKED"),
    BLOCK_PARTY("SIMA_OPERATION_TYPE.BLOCK_PARTY"),
    BLOCK_ACCOUNT("SIMA_OPERATION_TYPE.BLOCK_ACCOUNT"),
    UNBLOCK_ACCOUNT("SIMA_OPERATION_TYPE.UNBLOCK_ACCOUNT"),
    UNBLOCK_PARTY("SIMA_OPERATION_TYPE.UNBLOCK_PARTY"),
    GET_ALLOCATED_SECURITIES_CODE("SIMA_OPERATION_TYPE.GET_ALLOCATED_SECURITIES_CODE"),
    GET_ALLOCATED_SECURITIES("SIMA_OPERATION_TYPE.GET_ALLOCATED_SECURITIES"),
    GET_SECURITIES_COUPONS_DATE("SIMA_OPERATION_TYPE.GET_SECURITIES_COUPONS_DATE"),
    GET_SALE_INTEREST("SIMA_OPERATION_TYPE.GET_SALE_INTEREST"),
    GET_RESALE_INTEREST("SIMA_OPERATION_TYPE.GET_RESALE_INTEREST"),
    GET_REDEMPTION_INTEREST("SIMA_OPERATION_TYPE.GET_REDEMPTION_INTEREST"),
    GET_SECURITIES_FOR_SALE("SIMA_OPERATION_TYPE.GET_SECURITIES_FOR_SALE"),
    GET_SECURITIES_CODES_FOR_SALE("SIMA_OPERATION_TYPE.GET_SECURITIES_CODES_FOR_SALE"),
    GET_SECURITIES_CODES_FOR_TRANSFER("SIMA_OPERATION_TYPE.GET_SECURITIES_CODES_FOR_TRANSFER"),
    GET_SECURITIES_CODES_FOR_REDEMPTION("SIMA_OPERATION_TYPE.GET_SECURITIES_CODES_FOR_REDEMPTION"),
    GET_SECURITIES_CODES_FOR_RESALE("SIMA_OPERATION_TYPE.GET_SECURITIES_CODES_FOR_RESALE"),
    GET_SECURITIES_FOR_TRANSFER("SIMA_OPERATION_TYPE.GET_SECURITIES_FOR_TRANSFER"),
    GET_SECURITIES_FOR_REDEMPTION("SIMA_OPERATION_TYPE.GET_SECURITIES_FOR_REDEMPTION"),
    GET_SECURITIES_FOR_RESALE("SIMA_OPERATION_TYPE.GET_SECURITIES_FOR_RESALE"),
    SALE_SECURITIES("SIMA_OPERATION_TYPE.SALE_SECURITIES"),
    TRANSFER_SECURITIES("SIMA_OPERATION_TYPE.TRANSFER_SECURITIES"),
    REDEMPTION_SECURITIES("SIMA_OPERATION_TYPE.REDEMPTION_SECURITIES"),
    RESALE_SECURITIES("SIMA_OPERATION_TYPE.RESALE_SECURITIES"),
    REVERSE_TRANSACTION("SIMA_OPERATION_TYPE.REVERSE_TRANSACTION"),
    PARTIAL_BLOCK_ACCOUNT("SIMA_OPERATION_TYPE.PARTIAL_BLOCK_ACCOUNT"),
    PARTIAL_UNBLOCK_ACCOUNT("SIMA_OPERATION_TYPE.PARTIAL_UNBLOCK_ACCOUNT"),
    UPDATE_CUSTOMER_IBAN("SIMA_OPERATION_TYPE.UPDATE_CUSTOMER_IBAN"),
    GET_ACCOUNTS("SIMA_OPERATION_TYPE.GET_ACCOUNTS"),
    UPDATE_AGENT_IBAN("SIMA_OPERATION_TYPE.UPDATE_AGENT_IBAN");

    private String key;
    static Logger logger = LoggerFactory.getLogger(SimaOperationType.class);

    SimaOperationType(String key) {
        this.key = key;
    }

    public static SimaOperationType getByCommonValueCode(long commonValueCode) {
        for (SimaOperationType simaOperationType : SimaOperationType.values()) {
            CommonValueDto commonValue = simaOperationType.getCommonValue();
            if (commonValue != null && commonValue.getCode() == commonValueCode)
                return simaOperationType;
        }

        logger.error("{} not found for commonValue : {}", SimaOperationType.class.getName(), commonValueCode);
        return null;
    }

    @Override
    public CommonValueDto getCommonValue() {
        return CommonValueUtil.getByCommonValueByTypeValueKey(key);
    }

}
